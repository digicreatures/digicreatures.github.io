<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>digiCreatures</title><link href="http://digicreatures.net/" rel="alternate"></link><link href="http://digicreatures.net/feeds/all.atom.xml" rel="self"></link><id>http://digicreatures.net/</id><updated>2017-10-19T12:00:00+02:00</updated><entry><title>Rigacar</title><link href="http://digicreatures.net/articles/rigacar.html" rel="alternate"></link><published>2017-10-19T12:00:00+02:00</published><updated>2017-10-19T12:00:00+02:00</updated><author><name>David Gayerie</name></author><id>tag:digicreatures.net,2017-10-19:/articles/rigacar.html</id><summary type="html">&lt;p class="first last"&gt;a Blender addon to rig... a car&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition admonition-downloadable-file"&gt;
&lt;p class="first admonition-title"&gt;Downloadable file&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/digicreatures/rigacar/releases/latest"&gt;rigacar.zip&lt;/a&gt;&lt;/p&gt;
&lt;p class="last"&gt;The addon is available on GitHub&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you want to animate cars but you don't want to spend too much time for rigging,
Rigacar could be helpful. It is a free addon for &lt;a class="reference external" href="https://www.blender.org"&gt;Blender&lt;/a&gt; I developed during the
preproduction phase of one of my projects. Rigacar was designed to fulfill the
following goals:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;generate a complete rig as quickly as possible for &lt;em&gt;standard&lt;/em&gt; car models&lt;/li&gt;
&lt;li&gt;provide tools to automate wheels animation&lt;/li&gt;
&lt;li&gt;allow efficient animation baking to be able to export animated models into real time renderers&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="add-the-deformation-rig"&gt;
&lt;h2&gt;Add the deformation rig&lt;/h2&gt;
&lt;p&gt;Once you have installed and enabled the addon, you can add to your scene a new
kind of armature : a deformation rig for a car.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/rigacar/add_menu.jpg" data-lightbox="rigacar"&gt;&lt;img alt="" src="http://digicreatures.net/photos/rigacar/add_menut.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;It is called a deformation rig because it adds an armature with only five bones
used to animate directly your model : the four wheels and the body. Rigacar expects
your model is oriented along the Y axis. This way the front of your model matches
the front view in &lt;a class="reference external" href="https://www.blender.org"&gt;Blender&lt;/a&gt;. If it is not the case, you should rotate your model
to match this orientation. Of course, don't forget to apply rotation and scale on you model.&lt;/p&gt;
&lt;p&gt;If you look at the rig, you will notice that each bone's head (the big end) is
positioned ahead. Please don't change the orientation of the bones or the final
rig will not work properly.&lt;/p&gt;
&lt;p&gt;You should place the bones for the wheels first to fit your model according
to their names:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Bone name&lt;/th&gt;
&lt;th class="head"&gt;Associated wheel object&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;DEF-Wheel.Ft.L&lt;/td&gt;
&lt;td&gt;Front left wheel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DEF-Wheel.Ft.R&lt;/td&gt;
&lt;td&gt;Front right wheel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DEF-Wheel.Bk.L&lt;/td&gt;
&lt;td&gt;Rear left wheel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DEF-Wheel.Bk.R&lt;/td&gt;
&lt;td&gt;Rear right wheel&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For each wheel, the bone's head must be placed at the center of the wheel but,
on the X axis, the bone should be placed inward (especially for front wheels to
match the pivot point of the steering axis). The length of the bone must match
the radius of the wheel.&lt;/p&gt;
&lt;p&gt;DEF-Body is the name of the deformation bone for the car body. Its head should be placed at
the center of the car chassis and the tail should be at the back of the model to
give an hint of its length.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/rigacar/deformation_rig.jpg" data-lightbox="rigacar"&gt;&lt;img alt="" src="http://digicreatures.net/photos/rigacar/deformation_rigt.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="parent-your-model"&gt;
&lt;h2&gt;Parent your model&lt;/h2&gt;
&lt;p&gt;Then you have to parent each part of your model to the corresponding bone. If you
have more than 5 objects for your model (for instance if you have objects for the
rims and others for the tires), you can either parent them to the corresponding
bone or create a hierarchy (i.e. parenting the tire to the rim and the rim to the bone).&lt;/p&gt;
&lt;p&gt;You can now generate the complete rig... but wait! This is really
a cumbersome workflow. Actually, you can achieve the previous steps in a much faster way.
You just have to follow the naming convention!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-naming-convention"&gt;
&lt;h2&gt;Use naming convention&lt;/h2&gt;
&lt;p&gt;If you have named your objects wisely, the addon can do almost all the job for you.
Your wheels name should end respectively with &lt;em&gt;Wheel.Ft.L&lt;/em&gt;, &lt;em&gt;Wheel.Ft.R&lt;/em&gt;,
&lt;em&gt;Wheel.Bk.L&lt;/em&gt; and &lt;em&gt;Wheel.Bk.R&lt;/em&gt; and the body name should end with &lt;em&gt;Body&lt;/em&gt;. Then, make
sure the center point of each object is correctly placed.&lt;/p&gt;
&lt;p&gt;Select all four wheels and the body (you can even select more than the expected
objects because the additional ones will simply be ignored) and add the deformation
rig. Rigacar will automatically create each bone to match the center point of
the corresponding object. You can use the operator parameters to quickly adjust the rig.
For instance you can easily push wheel bones inward on the X axis.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/rigacar/deformation_rig_operator_panel.jpg" data-lightbox="rigacar"&gt;&lt;img alt="" src="http://digicreatures.net/photos/rigacar/deformation_rig_operator_panelt.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Rigacar will also automatically parent your objects with the correct bone. This way,
you can generate a rig for your model in only few seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generate-the-complete-rig"&gt;
&lt;h2&gt;Generate the complete rig&lt;/h2&gt;
&lt;p&gt;Whatever the method you have chosen, once the deformation rig is in place and your
model is parented to the bones, you can now generate the complete rig.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/rigacar/generate_animation_rig.jpg" data-lightbox="rigacar"&gt;&lt;img alt="" src="http://digicreatures.net/photos/rigacar/generate_animation_rigt.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Use the button &lt;em&gt;Generate&lt;/em&gt; available in the properties panel in the 3D View. You can
also find the same button in the properties of the armature.&lt;/p&gt;
&lt;p&gt;The complete rig is generated and dispatched over several armature's layers :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Layer 1 (blue widgets) contains the root bone for the overall model and
the drift bone to control location and orientation of the car&lt;/li&gt;
&lt;li&gt;Layer 2 (yellow widgets) contains the suspension bone and one damper bone per wheel&lt;/li&gt;
&lt;li&gt;Layer 3 (green widgets) contains front wheels, back wheels bones and the steering
bone to control rotation of the wheels&lt;/li&gt;
&lt;li&gt;Layer 4 (red widgets) contains the ground sensors (one per wheel)&lt;/li&gt;
&lt;li&gt;Layer 31 contains the deformation bones (from the deformation rig)&lt;/li&gt;
&lt;li&gt;Layer 32 contains mechanical bones if you want to tweak or improve the rig.&lt;/li&gt;
&lt;/ul&gt;
&lt;a href="http://digicreatures.net/photos/rigacar/animation_rig.jpg" data-lightbox="rigacar"&gt;&lt;img alt="" src="http://digicreatures.net/photos/rigacar/animation_rigt.jpg" /&gt;&lt;/a&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Ground sensors (layer 4) are generated with a shrinkwrap constraint named &lt;em&gt;Ground
projection&lt;/em&gt;. By default, this constraint is not activated. Just target the object
used as the ground in your scene to stick each wheel to the ground. Ground sensors
are designed to fake roadholding, not to control the location of the car.
Use the root bone to move your model accross the scene.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Rigacar will try to position widgets to match your model. But you can adjust the
widgets position and scale. To adjust the position, select the widget, go to edit mode
and change the position of the bone. To adjust the scale, go to pose mode and change
the scale of the custom widget into the bone properties panel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wheels-rotation-on-the-y-axis"&gt;
&lt;h2&gt;Wheels rotation on the Y axis&lt;/h2&gt;
&lt;p&gt;The animation rig can rotate wheels as you move your model along the Y axis.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/rigacar/rigacar_panel_wheels_on_y_axis.jpg" data-lightbox="rigacar"&gt;&lt;img alt="" src="http://digicreatures.net/photos/rigacar/rigacar_panel_wheels_on_y_axist.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Be aware the rotation is only correct for translation on this axis.
So, this feature is not the proper way to animate wheels with Rigacar (see section
below). But it is useful to quickly check the generated rig. In &lt;em&gt;Car Rig&lt;/em&gt; panel,
put the property 'Wheels on Y axis' to 1 to activate this feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generate-wheels-animation"&gt;
&lt;h2&gt;Generate wheels animation&lt;/h2&gt;
&lt;p&gt;Most of the time, you don't really need to animate wheels. Rigacar can bake the
animation for you based on the motion of your model. So you should not animate
the steering bone nor the front wheels bone and the back wheels bone.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/rigacar/rigacar_panel_bake.jpg" data-lightbox="rigacar"&gt;&lt;img alt="" src="http://digicreatures.net/photos/rigacar/rigacar_panel_baket.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Whenever you need, click on &lt;em&gt;Bake wheels rotation&lt;/em&gt; and on &lt;em&gt;Bake steering&lt;/em&gt; buttons:
Rigacar will create the animation. In the popup dialog, you can specify
the following parameters:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;em&gt;Start frame and end frame&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;The range for the animation. By default it matches the range of the current
animation. You can adjust it if you like.&lt;/dd&gt;
&lt;dt&gt;&lt;em&gt;Visual keying&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;By default, the animation is based on the real position of your model. Unless
you have a good reason to uncheck this option, leave it on.&lt;/dd&gt;
&lt;dt&gt;&lt;em&gt;Keyframe tolerance&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;Rigacar tries not to add keyframe if it is not necessary. If you want to remove
some noise in the animation, you can crank up this value: Rigacar will become
more and more tolerant and will ignore significant variations, adding less
keyframes. On the contrary, if you set this value to zero, Rigacar will
add keyframes for each frame.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="adjust-suspension"&gt;
&lt;h2&gt;Adjust suspension&lt;/h2&gt;
&lt;p&gt;Moving ground sensor and damper nodes has an effect over the body of your model.
Animation of these bones is supposed to be subtle. Otherwise, your model
will be stripped away. If you want, you can adjust this suspension effect in &lt;em&gt;Car Rig&lt;/em&gt; panel.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/rigacar/rigacar_panel_suspension.jpg" data-lightbox="rigacar"&gt;&lt;img alt="" src="http://digicreatures.net/photos/rigacar/rigacar_panel_suspensiont.jpg" /&gt;&lt;/a&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;em&gt;Suspension factor&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;This factor adjust the variation on the local Z axis of the body when ground
sensors and/or damper nodes are moving.&lt;/dd&gt;
&lt;dt&gt;&lt;em&gt;Suspension rolling factor&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;This factor adjust rolling of the body when ground sensors and/or damper nodes
are moving.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;If you want to keep full control on your animation, you can turn these factors
to 0 to deactivate any effect from the suspension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-infinity-and-beyond"&gt;
&lt;h2&gt;To infinity and beyond&lt;/h2&gt;
&lt;p&gt;I will be glad if this addon could be useful to some of you. I am no professional
rigger nor animator. So I am pretty sure this addon and the generated rig can
be dramatically improved. Use them in a way I have not imagined and give me feedbacks.
You can use the comments below, you can &lt;a class="reference external" href="https://github.com/digicreatures/rigacar/issues"&gt;create an issue&lt;/a&gt;
on GitHub and, of course, you can &lt;a class="reference external" href="https://github.com/digicreatures/rigacar"&gt;fork my code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Originally, I planned to use the addon developped by &lt;a class="reference external" href="https://blenderartists.org/forum/showthread.php?239360-Car-Rig"&gt;Ondrej Raha&lt;/a&gt;.
But this addon seems not to work properly on latest &lt;a class="reference external" href="https://www.blender.org"&gt;Blender&lt;/a&gt; version. I spent
some time trying to update it but, eventually, I realized it would not provide the features
I was looking for. So I decided to write my own addon and finally to share it with the community.&lt;/p&gt;
&lt;p&gt;Drive safely :)&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Nice BMW27 model used in this article comes from the &lt;a class="reference external" href="https://www.blender.org/download/demo-files/"&gt;Blender demo files&lt;/a&gt;.
Thanks to Mike Pan for creating and sharing it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="rigacar"></category><category term="blender"></category><category term="rig"></category><category term="car"></category><category term="animation"></category></entry><entry><title>Baking normal from Cycles material</title><link href="http://digicreatures.net/articles/cycles-normal-baking.html" rel="alternate"></link><published>2017-06-10T12:00:00+02:00</published><updated>2017-06-10T12:00:00+02:00</updated><author><name>David Gayerie</name></author><id>tag:digicreatures.net,2017-06-10:/articles/cycles-normal-baking.html</id><summary type="html">&lt;p class="first last"&gt;a useful node for baking normal correctly&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition admonition-downloadable-file"&gt;
&lt;p class="first admonition-title"&gt;Downloadable file&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://digicreatures.net/resources/normal_to_map.blend"&gt;normal_to_map.blend&lt;/a&gt;&lt;/p&gt;
&lt;p class="last"&gt;This file contains the &lt;em&gt;normal to map&lt;/em&gt; node for Cycles.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you have ever tried to bake normals in &lt;a class="reference external" href="http://www.blender.org"&gt;Blender&lt;/a&gt; using Cycles
render engine, you probably noticed the following behavior:
the bake process uses only information from the mesh geometry and ignores normal variations
created by your material. It means that if you use normal map and/or bump map, they are not taken
into account.&lt;/p&gt;
&lt;p&gt;If we think about it, it should not be really surprising: as Cycles is based on a nodal system,
we can create materials with infinite combinations, we can even use one normal map for diffuse shader and another for glossy shader.
It provides complete artistic freedom... but this also means Cycles cannot identify which part of your material is related
to normal computation. So the bake tool has no other option than completely ignores effects created by your material when you choose
&lt;em&gt;normal&lt;/em&gt; as the bake type.&lt;/p&gt;
&lt;p&gt;Too much freedom leads sometime to frustrating limitations! Actually, baking normals including material
effects is really useful for at least two reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If you use a normal map to catch details from a high resolution model and a bump map to paint additional
details, you probably combine them in your Cycles material. But if you want to export your model
in other render engines, some of them (especially real time renderers) allow to use either normal
map or bump map but not both of them. You shoudn't have to choose between one map or another...&lt;/li&gt;
&lt;li&gt;If you use high resolution textures, it could be interesting to merge information from normal map,
bump map and procedural normal textures into a single normal map to reduce memory footprint and simplify your material.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;The &lt;em&gt;Material Output&lt;/em&gt; node in Cycles has the &lt;em&gt;Displacement&lt;/em&gt; dedicated slot. If you use this slot in your material
it deactivates all &lt;em&gt;Normal&lt;/em&gt; slot from all nodes. But as it also clearly indicates to Cycles how your material
is affecting the geometry, then the effect of the displacement will be included in the bake process.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Even if it is not straighforward, you can actually create normal map including effects from your material
in Cycles. I found several ways to achieve that. All of them, as far as I can judge,
are mathematically correct (otherwise the final normal map would create slightly different effect
than the original material). From my perspective, the most effective way was to create a special
node in Cycles. I called it &lt;em&gt;normal to map&lt;/em&gt;. In this article, I will explain how to use it
and the math foundations behind it.&lt;/p&gt;
&lt;p&gt;If you just want to use the &lt;em&gt;normal to map&lt;/em&gt; node, you can &lt;a class="reference external" href="http://digicreatures.net/resources/normal_to_map.blend"&gt;download the blend file&lt;/a&gt;.
The file contains a very simple example and the node itself.
This file is licensed under &lt;a class="reference external" href="https://creativecommons.org/publicdomain/zero/1.0/"&gt;CC0 1.0 Universal&lt;/a&gt;
so you can freely use this node for your own purpose.&lt;/p&gt;
&lt;p&gt;For the rest of this article, I assume that you are familiar with Blender, Cycles and the bake tool in Blender.&lt;/p&gt;
&lt;div class="section" id="how-to-use-normal-to-map-node"&gt;
&lt;h2&gt;How to use &lt;em&gt;normal to map&lt;/em&gt; node&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;normal to map&lt;/em&gt; node is designed to be used when you want to bake normal information from your material
in Cycles. So you should add it just before the baking process and remove it from your material afterward.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a href="http://digicreatures.net/photos/full_normal_baking/material_with_normal_to_map_node.jpg" data-lightbox="full_normal_baking"&gt;&lt;img alt="Material using the normal to map node" src="http://digicreatures.net/photos/full_normal_baking/material_with_normal_to_map_nodet.jpg" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Material using the &lt;em&gt;normal to map&lt;/em&gt; node&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The input slot &lt;em&gt;Normal&lt;/em&gt; expects the same input as standard BSDF nodes and it is the normal you want to bake.
There are two output slots: &lt;em&gt;sRGB color&lt;/em&gt; and &lt;em&gt;Non-color&lt;/em&gt;. &lt;strong&gt;You must use the same output as the color space of
your baking texture&lt;/strong&gt;. By default, Blender creates a texture in sRGB color space.&lt;/p&gt;
&lt;p&gt;I encourage you to use the &lt;em&gt;Non-Color&lt;/em&gt; format: less computation is required (no gamma correction applied)
so it should avoid some rounding issues during computation. You can change color space of your texture in the
properties panel in the UV/image editor.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a href="http://digicreatures.net/photos/full_normal_baking/texture_color_space.jpg" data-lightbox="full_normal_baking"&gt;&lt;img alt="Texture color space in the UV/image editor" src="http://digicreatures.net/photos/full_normal_baking/texture_color_spacet.jpg" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Texture color space in the UV/image editor&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;For people using the Filmic Blender color management, &lt;em&gt;sRGB&lt;/em&gt; is labeled &lt;em&gt;sRGB EOTF&lt;/em&gt; and &lt;em&gt;Non-color&lt;/em&gt; is labeled &lt;em&gt;Non-Colour Data&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Usage of this node follows these steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;add the 'normal to map' node to your material&lt;/li&gt;
&lt;li&gt;plug in the normal you want to bake to the input socket&lt;/li&gt;
&lt;li&gt;plug the chosen output slot to an Emission node (ctrl+shift+left click if you use the Node Wrangler addon)&lt;/li&gt;
&lt;li&gt;in the UV/image editor, create a new image&lt;/li&gt;
&lt;li&gt;in the properties panel of the UV/image editor, choose the same color space as the output socket&lt;/li&gt;
&lt;li&gt;add a texture node in your material and select the newly created image&lt;/li&gt;
&lt;li&gt;in the bake tool, select the type 'Emit'&lt;/li&gt;
&lt;li&gt;click the bake button&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;a href="http://digicreatures.net/photos/full_normal_baking/normal_to_map_steps.jpg" data-lightbox="full_normal_baking"&gt;&lt;img alt="Preview of all necessary steps" src="http://digicreatures.net/photos/full_normal_baking/normal_to_map_stepst.jpg" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Preview of all necessary steps&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The node creates the appropriate colors to represent the normal information. So you must use an emission
shader as if the object would &lt;em&gt;emit&lt;/em&gt; normal information. As pure emission material is not affected by
fireflies and light bouncing, you can use only one sample for rendering. It means that the baking
process is super fast!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="performance-improvements"&gt;
&lt;h2&gt;Performance improvements&lt;/h2&gt;
&lt;p&gt;Creating one normal texture to replace part of a material can provide interesting improvements.
Consider the images below. For the first one, the material of the body uses a normal map, a bump map
and a procedural texture to generate additional normal variations. For the second one, I baked the normal
from the original material using the &lt;em&gt;Normal to map&lt;/em&gt; node. I saved the result in a file and I created a much
simpler material using the baked normal map.&lt;/p&gt;
&lt;div class="images docutils container"&gt;
&lt;div class="figure"&gt;
&lt;a href="http://digicreatures.net/photos/full_normal_baking/portrait.2000s.16_03.materialbump.jpg" data-lightbox="full_normal_baking"&gt;&lt;img alt="Using the original material" src="http://digicreatures.net/photos/full_normal_baking/portrait.2000s.16_03.materialbumpt.jpg" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Using the original material&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;a href="http://digicreatures.net/photos/full_normal_baking/portrait.2000s.13_55.usingnormaltomap.jpg" data-lightbox="full_normal_baking"&gt;&lt;img alt="Using the normal map baked with the Normal to map node" src="http://digicreatures.net/photos/full_normal_baking/portrait.2000s.13_55.usingnormaltomapt.jpg" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Using the normal map baked with the &lt;em&gt;Normal to map&lt;/em&gt; node&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The following table shows some figures about the renderings:&lt;/p&gt;
&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Material&lt;/th&gt;
&lt;th class="head"&gt;Rendering time&lt;/th&gt;
&lt;th class="head"&gt;Memory peak&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Original material&lt;/td&gt;
&lt;td&gt;16:03&lt;/td&gt;
&lt;td&gt;1371 Mo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Material using baked normal&lt;/td&gt;
&lt;td&gt;13:55&lt;/td&gt;
&lt;td&gt;350 Mo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For this model, using a simpler material has a real impact on performance!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="known-issues"&gt;
&lt;h2&gt;Known issues&lt;/h2&gt;
&lt;p&gt;Due to internal computation, you can get slight variations of the normal computed by the &lt;em&gt;Normal to map&lt;/em&gt;
node and the original material. As these variations are really subtle there are completely unnoticeable.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Normal to map&lt;/em&gt; node is dramatically affected by rotation and scale of your model. Don't forget
to apply transformations in Blender before baking.&lt;/p&gt;
&lt;p&gt;The most annoying issue does not come from the node itself but from the bake process. If you look closely
at the two images above, they seem to be identical... but they are not! If you open these images into
separate tabs at full size and switch between them, you will notice a weird effect: some details seem to slip
over the surface! Look at the image below to see this effect:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="detail of the slip over effect" src="http://digicreatures.net/images/full_normal_baking/portrait_detail_normal_to_map_variation.gif" /&gt;
&lt;p class="caption"&gt;The &lt;em&gt;slip over&lt;/em&gt; effect between original material and material using the baked texture&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It took me a day to convince myself this effect was not created by the &lt;em&gt;Normal to map&lt;/em&gt; node!
Actually, the problem comes from the integration of the bump map into a normal map.
To summarize, bump map stores height information while normal map stores variation of height.
It means if a texture contains three pixels to represent a bump map, each pixel represents
a different height. To achieve the same result with a normal map, the texture must contain at
least two pixels to encode the variation of height. But most of all, there is a shift between
the bump map and the normal map.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="shift between bump map and normal map" src="http://digicreatures.net/images/full_normal_baking/bumpmap_vs_normalmap.png" /&gt;
&lt;p class="caption"&gt;Shift between bump map and normal map&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So when we want to convert directly or indirectly, bump map info into normal map info, we
get a shift of information in the final texture. One way to avoid this is to use a
texture with higher resolution for the final bake. But it is not always desirable.&lt;/p&gt;
&lt;p&gt;So if you plan to use the &lt;em&gt;Normal to map&lt;/em&gt; node be aware of this effect, especially if you
want to create close shot of your model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-normal-to-map-node-works"&gt;
&lt;h2&gt;How &lt;em&gt;normal to map&lt;/em&gt; node works&lt;/h2&gt;
&lt;p&gt;This section covers what happens under the hood. You don't need to understand that part to
use the node. But if you are interested in the math, let's start with normal map.&lt;/p&gt;
&lt;p&gt;Obviously, normal map has nothing to do with color! A normal texture
is an image and we can open it into an image editor. But it is not
really an image because each pixel (or to be precise each texel) is not a
color information: it is a normal information.&lt;/p&gt;
&lt;p&gt;What is a normal? A normal is a vector perpendicular to a surface. Why is it so
important? Because the normal is used to define what is the front of a face
and what is the back. More importantly, the normal is used internally in almost any
shader node. For instance to define how the light bounces over the surface.
If we can cheat and slightly modify the orientation of the normal over the surface
we can change the way the light bounces, create fake bumps and simulate non existing geometry.
This is precisely what normal map is used for.&lt;/p&gt;
&lt;p&gt;Normal texture stores normal variations considering the original normal coordinates are (0,0,1).
It means that the coordinates must be in tangent space. And that's the point:
Cycles provides normal information in world space. In order to bake normal, we
have to transform normal vectors from world space to tangent space.
So, we have to do the following operation:&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;N&lt;/i&gt;&lt;sub&gt;&lt;i&gt;ts&lt;/i&gt;&lt;/sub&gt; = &lt;i&gt;M&lt;/i&gt;&lt;i&gt;N&lt;/i&gt;&lt;sub&gt;&lt;i&gt;ws&lt;/i&gt;&lt;/sub&gt;
&lt;/div&gt;
&lt;p&gt;Where &lt;span class="formula"&gt;&lt;i&gt;N&lt;/i&gt;&lt;sub&gt;&lt;i&gt;ws&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt; is the normal vector in world space (the one created by the material),
&lt;span class="formula"&gt;&lt;i&gt;M&lt;/i&gt;&lt;/span&gt; is the tranform matrix from world space to tangent space and &lt;span class="formula"&gt;&lt;i&gt;N&lt;/i&gt;&lt;sub&gt;&lt;i&gt;ts&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;
is the normal vector in tangent space (the one we want to get).
The tranform matrix &lt;span class="formula"&gt;&lt;i&gt;M&lt;/i&gt;&lt;/span&gt; is a 3x3 matrix composed in line by the tangent vector,
the bitangent vector and the original normal vector of the face:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="transformation matrix" src="http://digicreatures.net/images/full_normal_baking/ws2ts_matrix.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Cycles provides tangent vector and normal vector for the current face. We
can easily compute bitangent vector as the cross product of normal vector and tangent vector.
However, Cycles has no support for matrix operation but we can easily decompose the operations:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="transformation matrix decomposition" src="http://digicreatures.net/images/full_normal_baking/ws2ts_matrix_computation.png" /&gt;
&lt;/div&gt;
&lt;p&gt;and create the node set to do the math:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a href="http://digicreatures.net/photos/full_normal_baking/normal_to_map_wstots.jpg" data-lightbox="full_normal_baking"&gt;&lt;img alt="From world space to tangent space in Cycles" src="http://digicreatures.net/photos/full_normal_baking/normal_to_map_wstotst.jpg" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;From world space to tangent space in Cycles&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All this could have been much simpler if the
&lt;a class="reference external" href="https://docs.blender.org/manual/en/dev/render/cycles/nodes/types/vector/transform.html"&gt;Vector Transform&lt;/a&gt;
node accepts tangent space... could be an interesting improvement.&lt;/p&gt;
&lt;p&gt;Then we have to encode vector coordinates into color values to create the final normal
texture. As normal vector is a unit vector x, y and z coordinates are between -1 and 1.
We have to transform these coordinates to color values between 0 and 1. The
&lt;a class="reference external" href="https://docs.blender.org/manual/en/dev/render/cycles/nodes/types/vector/curves.html"&gt;Vector Curves&lt;/a&gt;
node can do the math for us.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a href="http://digicreatures.net/photos/full_normal_baking/normal_to_map_color_management.jpg" data-lightbox="full_normal_baking"&gt;&lt;img alt="Converting vector to color" src="http://digicreatures.net/photos/full_normal_baking/normal_to_map_color_managementt.jpg" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Converting vector to color&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Finally, sRGB color space means that Blender will apply a gamma correction of 1/2.2 because file formats
with 8 bits per channel (PNG, JPEG...) must pre encode color values like this. But as normal texture
does not contain color values but encoded vector coordinates, we must prevent this by applying
the inverse gamma correction of 2.2. Using a non color space for the bake texture is straightforward because
we inform Blender we want to use a linear color space (no gamma correction is needed).&lt;/p&gt;
&lt;/div&gt;
</content><category term="node"></category><category term="normal map"></category><category term="bake"></category></entry><entry><title>La Sphinge</title><link href="http://digicreatures.net/models/la-sphinge.html" rel="alternate"></link><published>2017-04-25T20:00:00+02:00</published><updated>2017-04-25T20:00:00+02:00</updated><author><name>David Gayerie</name></author><id>tag:digicreatures.net,2017-04-25:/models/la-sphinge.html</id><summary type="html">&lt;p class="first last"&gt;a personal vision of the mythological creature&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Sphinge is the French word for female sphinx. From my perspective, it is fundamentally a dual character: fascinating and repelling.
I wouldn't like to create a character like the one of antic sculptures or on 19th century paintings.
She should be more tribal and mystical with body paintings and golden jewelries.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/la_sphinge/sphinge01.jpg" data-lightbox="la_sphinge"&gt;&lt;img alt="La sphinge mystical pose" src="http://digicreatures.net/photos/la_sphinge/sphinge01t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/la_sphinge/sphinge02.jpg" data-lightbox="la_sphinge"&gt;&lt;img alt="La sphinge deploying her wings" src="http://digicreatures.net/photos/la_sphinge/sphinge02t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/la_sphinge/sphinge03.jpg" data-lightbox="la_sphinge"&gt;&lt;img alt="La sphinge facing the intruder" src="http://digicreatures.net/photos/la_sphinge/sphinge03t.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;This model was made during my training week with &lt;a class="reference external" href="http://p2design.eu/"&gt;Pierrick Picaut&lt;/a&gt;.
We had really interesting discussions about the concept of this character.
Unfortunately, I didn't succeed in embodying all ideas we discussed about (including jewelries).
Pierrick has also released his &lt;a class="reference external" href="https://blenderartists.org/forum/showthread.php?420404-Sphinge"&gt;own version&lt;/a&gt;.
His vision was definitely more fiendish than mine.&lt;/p&gt;
&lt;p&gt;I also uploaded a simplified version on Sketchfab:&lt;/p&gt;

&lt;div class="sketchfab-viewer "&gt;
    &lt;iframe width="710" height="430" src="https://sketchfab.com/models/aaa58f36bfaf46c6a6de6647489ebd47/embed" frameborder="0" allowvr allowfullscreen mozallowfullscreen="true" webkitallowfullscreen="true" onmousewheel=""&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><category term="creature"></category><category term="character"></category><category term="sphinge"></category><category term="sketchfab"></category><category term="sculpt"></category></entry><entry><title>The Batmobile</title><link href="http://digicreatures.net/models/the-batmobile.html" rel="alternate"></link><published>2017-02-26T12:00:00+01:00</published><updated>2017-02-26T12:00:00+01:00</updated><author><name>David Gayerie</name></author><id>tag:digicreatures.net,2017-02-26:/models/the-batmobile.html</id><summary type="html">&lt;p class="first last"&gt;from the 1989 Tim Burton's movie&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Car modeling is by no doubt a good way to improve hard surface modeling skills. But I really don't care about cars!
I don't even have a car! After a while, it appeared to me the only car I could find an interest in was the Batmobile designed
by Anton Furst for &lt;a class="reference external" href="https://www.youtube.com/watch?v=we_eTOeNSEE"&gt;Tim Burton's movie in 1989&lt;/a&gt;.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/batmobile_1989/batmobile_001.jpg" data-lightbox="batmobile_1989"&gt;&lt;img alt="The batmobile: front view created with Blender and Cycles" src="http://digicreatures.net/photos/batmobile_1989/batmobile_001t.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Luckily, I found out websites with many shots of this car and even blueprints created by fans who built their
own version! I also discovered that the car is in fact pretty bulky. You don't have this impression watching
the movie because the first time you see it, it is shot wide-angle. So I used the same trick for my renders.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/batmobile_1989/batmobile_002.jpg" data-lightbox="batmobile_1989"&gt;&lt;img alt="The batmobile: side view created with Blender and Cycles" src="http://digicreatures.net/photos/batmobile_1989/batmobile_002t.jpg" /&gt;&lt;/a&gt;
&lt;div class="images docutils container"&gt;
&lt;a href="http://digicreatures.net/photos/batmobile_1989/batmobile_004.jpg" data-lightbox="batmobile_1989"&gt;&lt;img alt="The batmobile: front view created with Blender and Cycles" src="http://digicreatures.net/photos/batmobile_1989/batmobile_004t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/batmobile_1989/batmobile_003.jpg" data-lightbox="batmobile_1989"&gt;&lt;img alt="The batmobile: rear view created with Blender and Cycles" src="http://digicreatures.net/photos/batmobile_1989/batmobile_003t.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;I did not use any particular trick for modeling. All the stuff was about extruding and moving vertices in Blender. I also used a polish brush
in sculpt mode to flatten the car body.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/batmobile_1989/batmobile_white.jpg" data-lightbox="batmobile_1989"&gt;&lt;img alt="The batmobile: plastic view created with Blender and Cycles" src="http://digicreatures.net/photos/batmobile_1989/batmobile_whitet.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;For material creation, I combined my own materials with ones from &lt;a class="reference external" href="https://www.cyclesmaterialvault.com/"&gt;CMV&lt;/a&gt;. I tweaked lighting setup
created with &lt;a class="reference external" href="https://blendermarket.com/products/pro-lighting-studio"&gt;Pro lighting studio&lt;/a&gt;. So this is definitely not a $0 rendering
but these addons help a lot.&lt;/p&gt;
</content><category term="hard-surface"></category><category term="modeling"></category><category term="car"></category><category term="fan art"></category><category term="batmobile"></category></entry><entry><title>Human topology</title><link href="http://digicreatures.net/models/human-topology.html" rel="alternate"></link><published>2017-02-22T20:00:00+01:00</published><updated>2017-02-22T20:00:00+01:00</updated><author><name>David Gayerie</name></author><id>tag:digicreatures.net,2017-02-22:/models/human-topology.html</id><summary type="html">&lt;p class="first last"&gt;sculpt and retopology of a human body&lt;/p&gt;
</summary><content type="html">&lt;p&gt;After watching several videos about human topology
(like &lt;a class="reference external" href="https://www.youtube.com/watch?v=a_2hN0_zHvA&amp;amp;list=PLBL6XxPV4C9QnaZxQC5Q6EmjzOIGjyci2"&gt;Jonathan Williamson's courses&lt;/a&gt;)
and after following Angela Guenette's (great) tutorial &lt;a class="reference external" href="https://store.blender.org/product/blenderella-download/"&gt;Blenderella&lt;/a&gt;,
I collected some reference images and sculpted and retopologized this human body.&lt;/p&gt;
&lt;p&gt;The material is quite simple and I didn't intent to create a super realistic skin shader.
I used a normal map baked from the sculpt, a bump map for adding details (mostly on the face)
, a noisy texture to add additional bumpiness all over the body and a really basic combination of diffuse, glossy and SSS shaders.
I really like the final result for the eyes. Probably because I didn't make them.
I used the &lt;em&gt;human eye&lt;/em&gt; released by MmAaXx on &lt;a class="reference external" href="http://www.blendswap.com/blends/view/72514"&gt;Blendswap&lt;/a&gt;.&lt;/p&gt;
&lt;div class="images docutils container"&gt;
&lt;a href="http://digicreatures.net/photos/human_topology/body001.jpg" data-lightbox="human_topology"&gt;&lt;img alt="male character rendered with Blender and Cycles" src="http://digicreatures.net/photos/human_topology/body001t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/human_topology/body001_topology.jpg" data-lightbox="human_topology"&gt;&lt;img alt="male character topology rendered with Blender and Cycles" src="http://digicreatures.net/photos/human_topology/body001_topologyt.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;For retopology in Blender, I used the setup described by &lt;a class="reference external" href="http://zachariasreinhardt.com/how-to-set-up-retopology-in-blender-tutorial/"&gt;Zacharias Reinhardt&lt;/a&gt;.
For the bump map, I painted it directly over the 3D model in Cycles. Yanal Sosak has made a great tutorial about &lt;a class="reference external" href="https://www.youtube.com/watch?v=fZyRimOBU-g"&gt;painting bump map in Cycles&lt;/a&gt;.
Very useful to know we can now use Cycles for bump painting.&lt;/p&gt;
&lt;div class="images docutils container"&gt;
&lt;a href="http://digicreatures.net/photos/human_topology/body002.jpg" data-lightbox="human_topology"&gt;&lt;img alt="human face rendered with Blender and Cycles" src="http://digicreatures.net/photos/human_topology/body002t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/human_topology/body002_topology.jpg" data-lightbox="human_topology"&gt;&lt;img alt="human face topology rendered with Blender and Cycles" src="http://digicreatures.net/photos/human_topology/body002_topologyt.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="images docutils container"&gt;
&lt;a href="http://digicreatures.net/photos/human_topology/body003.jpg" data-lightbox="human_topology"&gt;&lt;img alt="human front face body rendered with Blender and Cycles" src="http://digicreatures.net/photos/human_topology/body003t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/human_topology/body003_topology.jpg" data-lightbox="human_topology"&gt;&lt;img alt="human front face topology rendered with Blender and Cycles" src="http://digicreatures.net/photos/human_topology/body003_topologyt.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/human_topology/body004.jpg" data-lightbox="human_topology"&gt;&lt;img alt="human back face body rendered with Blender and Cycles" src="http://digicreatures.net/photos/human_topology/body004t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/human_topology/body004_topology.jpg" data-lightbox="human_topology"&gt;&lt;img alt="human back face topology rendered with Blender and Cycles" src="http://digicreatures.net/photos/human_topology/body004_topologyt.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
</content><category term="topology"></category><category term="character"></category><category term="human"></category><category term="male"></category><category term="sculpt"></category></entry><entry><title>The mourner</title><link href="http://digicreatures.net/models/the-mourner.html" rel="alternate"></link><published>2016-12-19T12:00:00+01:00</published><updated>2016-12-19T12:00:00+01:00</updated><author><name>David Gayerie</name></author><id>tag:digicreatures.net,2016-12-19:/models/the-mourner.html</id><summary type="html">&lt;p class="first last"&gt;draperie study inspired from the &lt;em&gt;mourners of dijon&lt;/em&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;While I wanted to learn to sculpt draperies in Blender, I discovered &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Claus_Sluter"&gt;Claus Sluter&lt;/a&gt;,
a Dutch sculptor who worked for the Duke of Burgundy in France during the late 1390's. He realized with his nephew &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Mourners_of_Dijon"&gt;the mourners
of Dijon&lt;/a&gt; made of albaster. Some of them are entirely covered with fabrics
and it inspired me this sculpture.&lt;/p&gt;
&lt;a href="http://digicreatures.net/photos/mourner/mourner.jpg" data-lightbox="mourner"&gt;&lt;img alt="The mourner created with Blender and Cycles" src="http://digicreatures.net/photos/mourner/mournert.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Of course, I didn't succeed in achieving the same finess as the original ones. So I chose to use clay material for the render
to suggest an unfinished work.&lt;/p&gt;
&lt;div class="images docutils container"&gt;
&lt;a href="http://digicreatures.net/photos/mourner/mourner_ogl1.jpg" data-lightbox="mourner"&gt;&lt;img alt="The mourner viewport preview" src="http://digicreatures.net/photos/mourner/mourner_ogl1t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/mourner/mourner_ogl2.jpg" data-lightbox="mourner"&gt;&lt;img alt="The mourner viewport preview" src="http://digicreatures.net/photos/mourner/mourner_ogl2t.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://digicreatures.net/photos/mourner/mourner_ogl3.jpg" data-lightbox="mourner"&gt;&lt;img alt="The mourner viewport preview" src="http://digicreatures.net/photos/mourner/mourner_ogl3t.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
</content><category term="sculpt"></category><category term="character"></category><category term="fabric"></category><category term="draperie"></category></entry></feed>